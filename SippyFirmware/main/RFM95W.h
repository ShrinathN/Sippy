#ifndef RFM95W_H
#define RFM95W_H

#include "main.h"

typedef enum
{
    RFM95W_REG_FIFO,
    RFM95W_REG_OPMODE,
    RFM95W_REG_FR_MSB = 0x06,
    RFM95W_REG_FR_MID,
    RFM95W_REG_FR_LSB,
    RFM95W_REG_PA_CONFIG,
    RFM95W_REG_PA_RAMP,
    RFM95W_REG_OCP,
    RFM95W_REG_LNA,
    RFM95W_REG_FIFO_ADDR_PTR,
    RFM95W_REG_FIFO_TX_BASE_ADDR,
    RFM95W_REG_FIFO_RX_BASE_ADDR,
    RFM95W_REG_FIFO_RX_CURRENT_ADDR,
    RFM95W_REG_IRQ_FLAGS_MASK,
    RFM95W_REG_IRQ_FLAGS,
    RFM95W_REG_RX_NB_BYTES,
    RFM95W_REG_RX_HEADER_CNT_VALUE_MSB,
    RFM95W_REG_RX_HEADER_CNT_VALUE_LSB,
    RFM95W_REG_RX_PACKET_CNT_VALUE_MSB,
    RFM95W_REG_RX_PACKET_CNT_VALUE_LSB,
    RFM95W_REG_MODEM_STAT,
    RFM95W_REG_PKT_SNR_VALUE,
    RFM95W_REG_PKT_RSSI_VALUE,
    RFM95W_REG_RSSI_VALUE,
    RFM95W_REG_HOP_CHANNEL,
    RFM95W_REG_MODEM_CONFIG_1,
    RFM95W_REG_MODEM_CONFIG_2,
    RFM95W_REG_SYMB_TIMEOUT_LSB,
    RFM95W_REG_PREAMBLE_MSB,
    RFM95W_REG_PREAMBLE_LSB,
    RFM95W_REG_PAYLOAD_LENGTH,
    RFM95W_REG_MAX_PAYLOUT_LENGTH,
    RFM95W_REG_HOP_PERIOD,
    RFM95W_REG_FIFO_RX_BYTE_ADDR,
    RFM95W_REG_MODEM_CONFIG_3,
    RFM95W_REG_PPM_CORRECTION,
    RFM95W_REG_FEI_MSB,
    RFM95W_REG_FEI_MID,
    RFM95W_REG_FEI_LSB,
    RFM95W_REG_RSSI_WIDE_BAND = 0x2C,
    RFM95W_REG_IF_FREQ_2 = 0x2F,
} RFM95W_LoRaRegister;

typedef enum
{
    RFM95W_LONG_RANGE_MODE_FSK_OOK,
    RFM95W_LONG_RANGE_MODE_LORA,
} RFM95W_LongRangeMode;

typedef enum
{
    RFM95W_ACCESS_LORA,
    RFM95W_ACCESS_FSK,
} RFM95W_AccessShare;

typedef enum
{
    RFM95W_MODE_SLEEP,
    RFM95W_MODE_STANDBY,
    RFM95W_MODE_FSTX,
    RFM95W_MODE_TX,
    RFM95W_MODE_FSRX,
    RFM95W_MODE_RXCONTINUOUS,
    RFM95W_MODE_RXSINGLE,
    RFM95W_MODE_CAD
} RFM95W_Mode;

typedef enum
{
    RFM95W_PA_RFO,
    RFM95W_PA_BOOST
} RFM95W_PaSelect;

typedef enum
{
    RFM95W_PMAX_10_8_DB,
    RFM95W_PMAX_11_4_DB,
    RFM95W_PMAX_12_0_DB,
    RFM95W_PMAX_12_6_DB,
    RFM95W_PMAX_13_2_DB,
    RFM95W_PMAX_13_8_DB,
    RFM95W_PMAX_14_4_DB,
    RFM95W_PMAX_15_0_DB,
} RFM95W_MaxPower;

typedef enum
{
    RFM95W_OUTPUT_POWER_0,
    RFM95W_OUTPUT_POWER_1,
    RFM95W_OUTPUT_POWER_2,
    RFM95W_OUTPUT_POWER_3,
    RFM95W_OUTPUT_POWER_4,
    RFM95W_OUTPUT_POWER_5,
    RFM95W_OUTPUT_POWER_6,
    RFM95W_OUTPUT_POWER_7,
    RFM95W_OUTPUT_POWER_8,
    RFM95W_OUTPUT_POWER_9,
    RFM95W_OUTPUT_POWER_10,
    RFM95W_OUTPUT_POWER_11,
    RFM95W_OUTPUT_POWER_12,
    RFM95W_OUTPUT_POWER_13,
    RFM95W_OUTPUT_POWER_14,
    RFM95W_OUTPUT_POWER_15,
}RFM95W_OutputPower;

// public functions
void RFM95W_set_handle(spi_device_handle_t *handle, SemaphoreHandle_t * spi_mutex_local);
void RFM95W_Reset();
void RFM95W_WriteRegisters(uint8_t *register_value, uint8_t length);
void RFM95W_Init();
void RFM95W_Set_LongRangeMode(RFM95W_LongRangeMode mode);
void RFM95W_Set_AccessShare(RFM95W_AccessShare share);
void RFM95W_Set_Mode(RFM95W_Mode mode);
void RFM95W_Set_FrequencyRegisters(uint32_t freq_register);
uint8_t RFM95W_ReadRegister(RFM95W_LoRaRegister reg);
void RFM95W_ReadRegisters(RFM95W_LoRaRegister reg, uint8_t *buffer, uint8_t bytes_to_read);
void RFM95W_RxMode();
void RFM95W_SetTxPtr(uint8_t ptr);
void RFM95W_SetRxPtr(uint8_t ptr);
void RFM95W_SetFifoPtr(uint8_t ptr);
void RFM95W_Transmit(uint8_t *data, uint8_t length);
void RFM95W_ClearAllInterrupts();
void RFM95W_WaitUntilTxDone();
void RFM95W_WaitUntilRxDone();
void RFM95W_StandbyMode();
#endif