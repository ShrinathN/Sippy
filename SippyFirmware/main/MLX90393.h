#ifndef MLX90393_H
#define MLX90393_H

#include "main.h"

// commands

typedef enum
{
    MLX90393_COMMAND_START_BURST_MODE = (0x01 << 4),
    MLX90393_COMMAND_START_WAKE_ON_CHANGE_MODE = (0x02 << 4),
    MLX90393_COMMAND_SINGLE_MEASUREMENT_MODE = (0x03 << 4),
    MLX90393_COMMAND_READ_MEASUREMENT = (0x04 << 4),
    MLX90393_COMMAND_READ_REGISTER = (0x05 << 4),
    MLX90393_COMMAND_WRITE_REGISTER = (0x06 << 4),
    MLX90393_COMMAND_EXIT_MODE = (0x08 << 4),
    MLX90393_COMMAND_MEMORY_RECALL = (0x0D << 4),
    MLX90393_COMMAND_MEMORY_STORE = (0x0E << 4),
    MLX90393_COMMAND_RESET = (0x0F << 4)
} MLX90393_Command;

typedef enum
{
    MLX90393_HALLCONF_0,
    MLX90393_HALLCONF_1,
    MLX90393_HALLCONF_2,
    MLX90393_HALLCONF_3,
    MLX90393_HALLCONF_4,
    MLX90393_HALLCONF_5,
    MLX90393_HALLCONF_6,
    MLX90393_HALLCONF_7,
    MLX90393_HALLCONF_8,
    MLX90393_HALLCONF_9,
    MLX90393_HALLCONF_10,
    MLX90393_HALLCONF_11,
    MLX90393_HALLCONF_12,
    MLX90393_HALLCONF_13,
    MLX90393_HALLCONF_14,
    MLX90393_HALLCONF_15
} MLX90393_Hallconf;

typedef enum
{
    MLX90393_REGISTER_0x00,
    MLX90393_REGISTER_0x01,
    MLX90393_REGISTER_0x02,
    MLX90393_REGISTER_0x03,
    MLX90393_REGISTER_0x04,
    MLX90393_REGISTER_0x05
} MLX90393_Register;

typedef enum
{
    MLX90393_GAIN_0,
    MLX90393_GAIN_1,
    MLX90393_GAIN_2,
    MLX90393_GAIN_3,
    MLX90393_GAIN_4,
    MLX90393_GAIN_5,
    MLX90393_GAIN_6,
    MLX90393_GAIN_7
} MLX90393_Gain;

typedef enum
{
    MLX90393_Z_AXIS_DISABLE,
    MLX90393_Z_AXIS_ENABLE
} MLX90393_Z_Measurement;

typedef enum
{
    MLX90393_BURST_DATA_RATE_0MS,
    MLX90393_BURST_DATA_RATE_20MS,
    MLX90393_BURST_DATA_RATE_40MS,
    MLX90393_BURST_DATA_RATE_60MS,
    MLX90393_BURST_DATA_RATE_80MS,
    MLX90393_BURST_DATA_RATE_100MS,
    MLX90393_BURST_DATA_RATE_120MS,
    MLX90393_BURST_DATA_RATE_140MS,
    MLX90393_BURST_DATA_RATE_160MS,
    MLX90393_BURST_DATA_RATE_180MS,
    MLX90393_BURST_DATA_RATE_200MS,
    MLX90393_BURST_DATA_RATE_220MS,
    MLX90393_BURST_DATA_RATE_240MS,
    MLX90393_BURST_DATA_RATE_260MS,
    MLX90393_BURST_DATA_RATE_280MS,
    MLX90393_BURST_DATA_RATE_300MS,
    MLX90393_BURST_DATA_RATE_320MS,
    MLX90393_BURST_DATA_RATE_340MS,
    MLX90393_BURST_DATA_RATE_360MS,
    MLX90393_BURST_DATA_RATE_380MS,
    MLX90393_BURST_DATA_RATE_400MS,
    MLX90393_BURST_DATA_RATE_420MS,
    MLX90393_BURST_DATA_RATE_440MS,
    MLX90393_BURST_DATA_RATE_460MS,
    MLX90393_BURST_DATA_RATE_480MS,
    MLX90393_BURST_DATA_RATE_500MS,
    MLX90393_BURST_DATA_RATE_520MS,
    MLX90393_BURST_DATA_RATE_540MS,
    MLX90393_BURST_DATA_RATE_560MS,
    MLX90393_BURST_DATA_RATE_580MS,
    MLX90393_BURST_DATA_RATE_600MS,
    MLX90393_BURST_DATA_RATE_620MS,
    MLX90393_BURST_DATA_RATE_640MS,
    MLX90393_BURST_DATA_RATE_660MS,
    MLX90393_BURST_DATA_RATE_680MS,
    MLX90393_BURST_DATA_RATE_700MS,
    MLX90393_BURST_DATA_RATE_720MS,
    MLX90393_BURST_DATA_RATE_740MS,
    MLX90393_BURST_DATA_RATE_760MS,
    MLX90393_BURST_DATA_RATE_780MS,
    MLX90393_BURST_DATA_RATE_800MS,
    MLX90393_BURST_DATA_RATE_820MS,
    MLX90393_BURST_DATA_RATE_840MS,
    MLX90393_BURST_DATA_RATE_860MS,
    MLX90393_BURST_DATA_RATE_880MS,
    MLX90393_BURST_DATA_RATE_900MS,
    MLX90393_BURST_DATA_RATE_920MS,
    MLX90393_BURST_DATA_RATE_940MS,
    MLX90393_BURST_DATA_RATE_960MS,
    MLX90393_BURST_DATA_RATE_980MS,
    MLX90393_BURST_DATA_RATE_1000MS,
    MLX90393_BURST_DATA_RATE_1020MS,
    MLX90393_BURST_DATA_RATE_1040MS,
    MLX90393_BURST_DATA_RATE_1060MS,
    MLX90393_BURST_DATA_RATE_1080MS,
    MLX90393_BURST_DATA_RATE_1100MS,
    MLX90393_BURST_DATA_RATE_1120MS,
    MLX90393_BURST_DATA_RATE_1140MS,
    MLX90393_BURST_DATA_RATE_1160MS,
    MLX90393_BURST_DATA_RATE_1180MS,
    MLX90393_BURST_DATA_RATE_1200MS,
    MLX90393_BURST_DATA_RATE_1220MS,
    MLX90393_BURST_DATA_RATE_1240MS,
    MLX90393_BURST_DATA_RATE_1260MS
} MLX90393_Burst_Data_Rate;

typedef struct {
    uint8_t status;
    float temperature;
    float x;
    float y;
    float z;
} MLX90393_Data;

typedef struct {
    uint8_t status;
    int16_t temperature;
    int16_t x;
    int16_t y;
    int16_t z;
} MLX90393_Data_Raw;

// public functions
void MLX90393_set_handle(spi_device_handle_t *handle, SemaphoreHandle_t * spi_mutex_local);
void MLX90393_Init();
void MLX90393_Read_Measurements(MLX90393_Data *output);
#endif